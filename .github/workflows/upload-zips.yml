name: Upload Project Zips to Release Assets (on Tag Push)

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on pushes to tags like v1.0.0, v1.0.0-beta, etc.

permissions:
  contents: write # Required to upload release assets

jobs:
  upload-project-zips:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Create Release if it doesn't exist and Upload Zips
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }} # Get the tag name (e.g., v1.0.0)
        run: |
          PROJECTS_DIR="./projects"
          ZIP_OUTPUT_DIR="./release_zips"

          # Check if the projects directory exists
          if [ ! -d "$PROJECTS_DIR" ]; then
            echo "Directory '$PROJECTS_DIR' not found. Skipping zip creation."
            exit 0
          fi

          mkdir -p "$ZIP_OUTPUT_DIR"

          echo "Checking for existing release for tag: $TAG_NAME"
          # Try to get existing release ID
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                             -H "Accept: application/vnd.github.v3+json" \
                             "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" | jq -r '.id')

          if [ "$RELEASE_ID" = "null" ]; then
            echo "No existing release found for tag '$TAG_NAME'. Creating a new one..."
            # Create a new release if it doesn't exist
            RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                                    -H "Accept: application/vnd.github.v3+json" \
                                    -d "{\"tag_name\":\"$TAG_NAME\",\"name\":\"Release $TAG_NAME\",\"body\":\"Automated release for tag $TAG_NAME\",\"draft\":false,\"prerelease\":false}" \
                                    "https://api.github.com/repos/${{ github.repository }}/releases")
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
            UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r '.upload_url')
            echo "Created release with ID: $RELEASE_ID"
          else
            echo "Found existing release with ID: $RELEASE_ID"
            # Get the upload URL for the existing release
            UPLOAD_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                               -H "Accept: application/vnd.github.v3+json" \
                               "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" | jq -r '.upload_url')
          fi

          if [ "$UPLOAD_URL" = "null" ]; then
            echo "Error: Could not determine upload URL for release."
            exit 1
          fi

          echo "Upload URL: $UPLOAD_URL"

          for project_path in "$PROJECTS_DIR"/*/; do
            if [ -d "$project_path" ]; then
              project_name=$(basename "$project_path")
              zip_file_name="${project_name}.zip"
              zip_file_path="${ZIP_OUTPUT_DIR}/${zip_file_name}"

              echo "--- Processing project: $project_name ---"
              echo "Zipping contents of '$project_path' into '$zip_file_path'..."
              (cd "$project_path" && zip -q -r "$GITHUB_WORKSPACE/$zip_file_path" .)

              echo "Uploading '$zip_file_name' to release assets..."
              curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: application/zip" \
                   --data-binary "@$zip_file_path" \
                   "$(echo "$UPLOAD_URL" | sed 's/{?name,label}//')?name=$zip_file_name" # Remove template from URL

              echo "Successfully uploaded '$zip_file_name'."
              echo "-------------------------------------"
            fi
          done

          echo "All project zips processed."
